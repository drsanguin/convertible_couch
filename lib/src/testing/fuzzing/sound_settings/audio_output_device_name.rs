use std::collections::HashSet;

use rand::{
    distr::{Alphanumeric, SampleString},
    rngs::StdRng,
    seq::IndexedRandom,
};

pub struct AudioOutputDeviceNameFuzzer {
    rand: StdRng,
}

impl AudioOutputDeviceNameFuzzer {
    const BRANDS: [&'static str; 145] = [
        "Abbingdon Music Research",
        "Acapella Audio Arts",
        "Acoustic Research",
        "ADAM Audio",
        "ADRaudio",
        "Advent Corporation",
        "Joe Akroyd",
        "Altec Lansing",
        "Amphion Loudspeakers",
        "Audioengine",
        "Bang & Olufsen",
        "Barefoot Sound",
        "BassBoss",
        "Behringer",
        "Blaupunkt",
        "Boombotix",
        "Bose Corporation",
        "Boss Audio",
        "Boston Acoustics",
        "Bowers & Wilkins",
        "Rudy Bozak",
        "Burmester Audiosysteme",
        "Cabasse",
        "Cambridge Audio",
        "Cambridge SoundWorks",
        "Canton Electronics",
        "Carvin Corporation",
        "Castle",
        "Celestion",
        "Cerwin-Vega",
        "Clair Global",
        "Community Professional Loudspeakers",
        "Creative Technology",
        "Crest Audio",
        "D&b audiotechnik",
        "Danish Audiophile Loudspeaker Industries",
        "Definitive Technology",
        "DEI Holdings",
        "DEQX",
        "Duntech",
        "Dynaco",
        "Dynaudio",
        "Eastern Acoustic Works",
        "Edifier",
        "Electro-Voice",
        "Eminent Technology",
        "Epos Ltd",
        "FeONIC",
        "Focal-JMLab",
        "Forsythe Audio",
        "Fostex",
        "Fujikon",
        "Funktion-One",
        "Genelec",
        "Generalmusic",
        "Genesis Technologies",
        "Grundorf",
        "Harman Kardon",
        "IBall",
        "Infinity Systems",
        "International Audio Group",
        "Jamo",
        "JBL",
        "Jensen Loudspeakers",
        "JLab Audio",
        "JVC",
        "JVCKenwood",
        "K-array",
        "KEF",
        "Kenwood Corporation",
        "Kharma International",
        "KLH",
        "Klipsch Audio Technologies",
        "Krell Industries",
        "L-Acoustics",
        "LEAK",
        "Legacy Audio",
        "Linn Products",
        "Lipinski Sound",
        "Logitech",
        "Mackie",
        "Magnepan",
        "MartinLogan",
        "McCune Audio/Video/Lighting",
        "McIntosh Laboratory",
        "Meridian Audio",
        "Meyer Sound Laboratories",
        "Monitor Audio",
        "Monsoon",
        "Mordaunt-Short",
        "NAD Electronics",
        "NHT Loudspeakers",
        "Origaudio",
        "Oswalds mill audio",
        "Peavey Electronics",
        "Phonic Corporation",
        "Pink Triangle",
        "Pioneer Corporation",
        "Plasmatronics",
        "PMC Ltd.",
        "Polk Audio",
        "ProAc",
        "PSB Speakers",
        "Pure",
        "QSC Audio Products",
        "Quad Electroacoustics",
        "Radford Electronics",
        "RadioShack",
        "Rectilinear Research Corporation",
        "Rega Research",
        "Renkus-Heinz",
        "Rogers International",
        "Roksan",
        "Snell Acoustics",
        "Sonodyne",
        "Sonos",
        "Sonus Faber",
        "Sony",
        "Spendor",
        "Steinway Lyngdorf",
        "Studiomaster",
        "Tannoy",
        "TEAC Corporation",
        "Technics",
        "Telavox",
        "Teufel",
        "Thiel Audio",
        "TOA Corporation",
        "U-Turn Audio",
        "Ultimate Ears",
        "Veritone Minimum Phase Speakers",
        "Vifa",
        "Viscount",
        "Vizio",
        "Voxx International",
        "Weltron",
        "Wharfedale",
        "Wilson Audio",
        "Wilson Benesch",
        "X-mini",
        "Yamaha Corporation",
        "Yamaha Pro Audio",
        "Yorkville Sound",
        "ZR Speaker Lab",
        "Zu Audio",
    ];

    pub fn new(rand: StdRng) -> Self {
        Self { rand }
    }

    pub fn generate_one(&mut self) -> String {
        let brand = Self::BRANDS.choose(&mut self.rand).unwrap();
        let model_id = Alphanumeric.sample_string(&mut self.rand, 10);

        format!("{brand} {model_id}")
    }

    pub fn generate_several(&mut self, count: usize) -> Vec<String> {
        let mut names = HashSet::with_capacity(count);

        while names.len() != count {
            let name = self.generate_one();

            names.insert(name);
        }

        Vec::from_iter(names)
    }
}
